# Task ID: 3
# Title: Integrate Ammo.js physics engine
# Status: done
# Dependencies: 2
# Priority: high
# Description: Set up the Ammo.js physics engine and create the foundation for flight physics simulation.
# Details:
Initialize Ammo.js physics world with appropriate gravity settings. Create utility functions for converting between Three.js and Ammo.js objects. Implement a physics update loop synchronized with the render loop. Set up collision detection system with appropriate broadphase. Create debug visualization tools for physics objects. Implement a system for applying forces and torques to rigid bodies.

# Test Strategy:
Test physics initialization and stability with simple objects. Verify that collision detection works correctly. Ensure physics calculations run efficiently on target devices.

# Subtasks:
## 1. Initialize Ammo.js physics world [done]
### Dependencies: None
### Description: Set up the Ammo.js physics world with appropriate gravity settings for flight simulation
### Details:
Import and initialize Ammo.js library. Create a physics world with appropriate configuration for aircraft simulation (lower gravity than standard Earth gravity). Set up the collision configuration, dispatcher, broadphase (preferably DbvtBroadphase for aircraft simulation), solver, and softBodySolver. Implement a singleton pattern for accessing the physics world throughout the application.

## 2. Create coordinate transformation utilities [done]
### Dependencies: 3.1
### Description: Develop utility functions to convert between Three.js and Ammo.js coordinate systems and objects
### Details:
Create functions to convert Three.js Vector3 to Ammo.js btVector3 and vice versa. Implement quaternion conversion utilities between Three.js and Ammo.js. Develop functions to transform mesh geometries to Ammo.js collision shapes. Create helper functions to synchronize position and rotation of Three.js objects with their Ammo.js counterparts.

## 3. Implement rigid body creation system [done]
### Dependencies: 3.1, 3.2
### Description: Create a system for generating and managing physics rigid bodies that correspond to Three.js objects
### Details:
Develop a factory class for creating rigid bodies with different collision shapes (box, sphere, cylinder, convex hull). Implement mass and inertia calculation for aircraft components. Create a registry to track and manage all physics bodies. Implement methods to add, remove, and update rigid bodies in the physics world. Add functionality to set initial position, rotation, and motion states.

## 4. Synchronize physics and render loops [done]
### Dependencies: 3.1, 3.2, 3.3
### Description: Create a physics update loop that synchronizes with the Three.js render loop
### Details:
Implement a fixed timestep physics simulation loop. Create a system to update Three.js object transforms based on physics simulation results. Handle time scaling for physics simulation. Implement interpolation between physics steps for smooth rendering. Add performance monitoring for physics calculations to ensure simulation runs at target framerate.

## 5. Implement collision detection system [done]
### Dependencies: 3.3, 3.4
### Description: Set up collision detection with appropriate callbacks and filtering for aircraft simulation
### Details:
Configure collision filtering using collision groups and masks. Implement collision callback system to handle different types of collisions (ground contact, object interactions). Create a contact point management system to track where collisions occur. Add collision event dispatching to notify other systems about physics interactions. Implement continuous collision detection for high-speed objects.

## 6. Create force application and debug visualization system [done]
### Dependencies: 3.3, 3.4, 3.5
### Description: Implement systems for applying aerodynamic forces and visualizing physics objects
### Details:
Develop methods to apply forces and torques to rigid bodies at specific points. Create utility functions for common flight forces (lift, drag, thrust). Implement a debug rendering system to visualize collision shapes, forces, and velocities. Add toggleable physics debug visualization with different visualization modes. Create a UI panel to adjust physics parameters in real-time for testing and debugging.

